#!/usr/bin/env ruby

# == Synopsis
#
# webri: Serve ri documentation via the Web
#
# == Usage
#
# webri [OPTIONS] ... [RI_DIR]
#
# OPTIONS:
#
#   -h, --help
#      show help
#
#   -o, --output OUTPUT_DIR
#      ouput static files to OUTPUT_DIR
#
# RI_DIR:
#
#   The directory in which to find the ri files generate by RDoc.

require 'getoptlong'
require 'rdoc/usage'

opts = GetoptLong.new(
  [ '--help',   '-h', GetoptLong::NO_ARGUMENT ],
  [ '--output', '-o', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--title',  '-t', GetoptLong::REQUIRED_ARGUMENT ]
)

dir    = nil
output = nil
title  = nil

opts.each do |opt, arg|
  case opt
  when '--help'
    RDoc::usage
  when '--output'
    output = arg.to_s
  when '--title'
    title = arg.to_s
  end
end

#if ARGV.length != 1
#  puts "Missing ri directory argument (try --help)"
#  exit 0
#end

library = ARGV.shift

# --- ---

require 'webri/ri_service'

service = WebRI::RiService.new(library)

if output

  # generate static pages

  require 'webri/generator'

  wri = WebRI::Generator.new(service, :title=>title)
  wri.generate(output)

else

  # serve dynamically via WEBrick

  require 'webri/server'

  wri = WebRI::Server.new(service, :title=>title)
  #puts wri.to_html

  require 'webrick'
  include WEBrick

  p wri.directory + "/public"

  s = HTTPServer.new(
    :Port            => 8888,
    :DocumentRoot    => wri.directory + "/public"
  )

  s.mount_proc("/"){ |req, res|
    path = req.path_info.sub(/^\//,'')
    if path == '' 
      res.body = wri.index
      res['Content-Type'] = "text/html"
    else
      res.body = wri.lookup(path)
      res['Content-Type'] = "text/html"
    end
  }

#  s.mount_proc("/ri"){|req, res|
#    #key = File.basename(req.path_info)
#    #p key
#    res.body = wri.lookup(req)
#    res['Content-Type'] = "text/html"
#  }

  ## mount subdirectories
  s.mount("/assets",  HTTPServlet::FileHandler, wri.directory + "/assets")
  #s.mount("/css", HTTPServlet::FileHandler, wri.directory + "/assets/css")
  #s.mount("/img", HTTPServlet::FileHandler, wri.directory + "/assets/img")

  trap("INT"){ s.shutdown }
  s.start

end

